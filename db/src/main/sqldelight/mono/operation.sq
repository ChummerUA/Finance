import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE operation (
    id TEXT NOT NULL PRIMARY KEY,
    time INTEGER NOT NULL,
    description TEXT NOT NULL,
    mcc INTEGER AS Int NOT NULL,
    original_mcc INTEGER AS Int NOT NULL,
    hold INTEGER AS Boolean NOT NULL,
    amount INTEGER NOT NULL,
    operation_amount INTEGER NOT NULL,
    currency_code INTEGER AS Int NOT NULL,
    commission_rate INTEGER NOT NULL,
    cashback_amount INTEGER NOT NULL,
    balance INTEGER NOT NULL,
    comment TEXT,
    receipt_id TEXT,
    invoice_id TEXT,
    counter_edrpou TEXT,
    counter_iban TEXT,
    counter_name TEXT
);

upsertOperation {
    UPDATE operation
    SET time = :time,
        description = :description,
        mcc = :mcc,
        original_mcc = :originalMcc,
        hold = :hold,
        amount = :amount,
        operation_amount = :operationAmount,
        currency_code = :currencyCode,
        commission_rate = :commissionRate,
        cashback_amount = :cashbackAmount,
        balance = :balance,
        comment = :comment,
        receipt_id = :receiptId,
        invoice_id = :invoiceId,
        counter_edrpou = :counterEdrpou,
        counter_iban = :counterIban,
        counter_name = :counterIban
    WHERE id = :id;

    INSERT OR IGNORE
    INTO operation
    VALUES (
        :id,
        :time,
        :description,
        :mcc,
        :originalMcc,
        :hold,
        :amount,
        :operationAmount,
        :currencyCode,
        :commissionRate,
        :cashbackAmount,
        :balance,
        :comment,
        :receiptId,
        :invoiceId,
        :counterEdrpou,
        :counterIban,
        :counterIban
    );
}

getOperations:
SELECT id, time, description, operation_amount, currency_code, mcc, original_mcc, cashback_amount
FROM operation
WHERE time < :time
ORDER BY time DESC, id DESC
LIMIT :pageSize;

getOpertionById:
SELECT *
FROM operation
WHERE operation.id = :transactionId;
